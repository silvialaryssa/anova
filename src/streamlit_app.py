import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_breuschpagan
from io import StringIO

st.set_page_config(page_title="An√°lise ANOVA - Ames Housing", layout="wide")
st.title("An√°lise Estat√≠stica com ANOVA - Ames Housing Dataset")

#st.sidebar.header("Upload do Dataset")
uploaded_file = 'src/AmesHousing.csv'  # Default file for demonstration


df = pd.read_csv(uploaded_file)
st.success("Arquivo carregado com sucesso!")

 # Se√ß√£o extra - Visualiza√ß√£o das colunas
st.header("üîé Visualiza√ß√£o das Colunas do Dataset")
st.dataframe(pd.DataFrame({"Colunas": df.columns}))

# Se√ß√£o extra - Visualiza√ß√£o das colunas
st.header("üîé Visualiza√ß√£o das Colunas do Dataset")
descricoes = {
    'Order': 'Identificador de ordem no dataset',
    'PID': 'Identificador √∫nico da propriedade',
    'MS SubClass': 'Tipo de constru√ß√£o (c√≥digo)',
    'MS Zoning': 'Classifica√ß√£o de zoneamento da propriedade',
    'Lot Frontage': 'Frente do lote (em p√©s)',
    'Lot Area': '√Årea total do lote (em p√©s quadrados)',
    'Street': 'Tipo de rua de acesso',
    'Alley': 'Tipo de beco de acesso (se houver)',
    'Lot Shape': 'Formato do lote',
    'Land Contour': 'Contorno do terreno',
    'Utilities': 'Servi√ßos p√∫blicos dispon√≠veis',
    'Lot Config': 'Configura√ß√£o do lote',
    'Land Slope': 'Inclina√ß√£o do terreno',
    'Neighborhood': 'Bairro onde a casa est√° localizada',
    'Condition 1': 'Proximidade com vias principais ou outras condi√ß√µes',
    'Condition 2': 'Condi√ß√£o adicional',
    'Bldg Type': 'Tipo de edifica√ß√£o',
    'House Style': 'Estilo da resid√™ncia',
    'Overall Qual': 'Qualidade geral do material e acabamento',
    'Overall Cond': 'Condi√ß√£o geral da casa',
    'Year Built': 'Ano de constru√ß√£o',
    'Year Remod/Add': 'Ano da √∫ltima reforma ou adi√ß√£o',
    'Roof Style': 'Estilo do telhado',
    'Roof Matl': 'Material do telhado',
    'Exterior 1st': 'Acabamento externo prim√°rio',
    'Exterior 2nd': 'Acabamento externo secund√°rio',
    'Mas Vnr Type': 'Tipo de revestimento de alvenaria',
    'Mas Vnr Area': '√Årea de revestimento de alvenaria',
    'Exter Qual': 'Qualidade do acabamento externo',
    'Exter Cond': 'Condi√ß√£o do acabamento externo',
    'Foundation': 'Tipo de funda√ß√£o',
    'Bsmt Qual': 'Qualidade do por√£o',
    'Bsmt Cond': 'Condi√ß√£o do por√£o',
    'Bsmt Exposure': 'Exposi√ß√£o do por√£o √† luz natural',
    'BsmtFin Type 1': 'Tipo de acabamento do por√£o 1',
    'BsmtFin SF 1': '√Årea do por√£o finalizada (tipo 1)',
    'BsmtFin Type 2': 'Tipo de acabamento do por√£o 2',
    'BsmtFin SF 2': '√Årea do por√£o finalizada (tipo 2)',
    'Bsmt Unf SF': '√Årea do por√£o n√£o finalizada',
    'Total Bsmt SF': '√Årea total do por√£o',
    'Heating': 'Tipo de aquecimento',
    'Heating QC': 'Qualidade do sistema de aquecimento',
    'Central Air': 'Possui ar condicionado central',
    'Electrical': 'Sistema el√©trico',
    '1st Flr SF': '√Årea do primeiro andar',
    '2nd Flr SF': '√Årea do segundo andar',
    'Low Qual Fin SF': '√Årea de baixa qualidade finalizada',
    'Gr Liv Area': '√Årea total habit√°vel acima do solo',
    'Bsmt Full Bath': 'Banheiro completo no por√£o',
    'Bsmt Half Bath': 'Meio banheiro no por√£o',
    'Full Bath': 'Banheiros completos acima do solo',
    'Half Bath': 'Meios banheiros acima do solo',
    'Bedroom AbvGr': 'N√∫mero de quartos acima do solo',
    'Kitchen AbvGr': 'N√∫mero de cozinhas acima do solo',
    'Kitchen Qual': 'Qualidade da cozinha',
    'TotRms AbvGrd': 'Total de c√¥modos acima do solo',
    'Functional': 'Funcionalidade da casa',
    'Fireplaces': 'N√∫mero de lareiras',
    'Fireplace Qu': 'Qualidade das lareiras',
    'Garage Type': 'Tipo de garagem',
    'Garage Yr Blt': 'Ano de constru√ß√£o da garagem',
    'Garage Finish': 'Acabamento da garagem',
    'Garage Cars': 'Capacidade de carros na garagem',
    'Garage Area': '√Årea da garagem',
    'Garage Qual': 'Qualidade da garagem',
    'Garage Cond': 'Condi√ß√£o da garagem',
    'Paved Drive': 'Entrada pavimentada',
    'Wood Deck SF': '√Årea do deck de madeira',
    'Open Porch SF': '√Årea da varanda aberta',
    'Enclosed Porch': '√Årea da varanda fechada',
    '3Ssn Porch': '√Årea da varanda de tr√™s esta√ß√µes',
    'Screen Porch': '√Årea da varanda com tela',
    'Pool Area': '√Årea da piscina',
    'Pool QC': 'Qualidade da piscina',
    'Fence': 'Tipo de cerca',
    'Misc Feature': 'Recursos adicionais (elevador, etc.)',
    'Misc Val': 'Valor dos recursos adicionais',
    'Mo Sold': 'M√™s da venda',
    'Yr Sold': 'Ano da venda',
    'Sale Type': 'Tipo de venda',
    'Sale Condition': 'Condi√ß√£o da venda',
    'SalePrice': 'Pre√ßo final de venda da casa'
}
colunas_df = pd.DataFrame({
    "Coluna": df.columns,
    "Descri√ß√£o": [descricoes.get(col, "") for col in df.columns]
})
st.dataframe(colunas_df)



# Sele√ß√£o das vari√°veis
var_target = 'SalePrice'
var1 = 'Neighborhood' # bairro
var2 = 'House_Style'  # estilo da casa
var3 = 'Bsmt_Full_Bath'   # banheiro completo no por√£o
#var3 = 'Heating'     # tipo de aquecimento

# Substitui espa√ßos por underscore (_) em todas as colunas
df.columns = df.columns.str.replace(' ', '_')

        
df_clean = df[[var_target, var1, var2, var3]].dropna()

# Se√ß√£o 1 - An√°lise Explorat√≥ria

st.header(f"1. An√°lise Explorat√≥ria das Tr√™s Caracter√≠sticas (Assumindo Normalidade): {var1}, {var2} e {var3}")
for var in [var1, var2, var3]:
    st.subheader(f"Distribui√ß√£o de {var} vs Pre√ßo de Venda")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.boxplot(x=var, y=var_target, data=df_clean, ax=ax)
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
    st.pyplot(fig)

# Se√ß√£o 2 - ANOVA Onoway
st.markdown("## ANOVA: An√°lise de Vari√¢ncia")
st.header("2. ANOVA: Compara√ß√£o de Pre√ßo M√©dio entre N√≠veis das Caracter√≠sticas")
results = {}
for var in [var1, var2, var3]:
    grupos = [group[var_target].values for name, group in df_clean.groupby(var)]
    anova = stats.f_oneway(*grupos)
    results[var] = anova.pvalue
    st.write(f"**{var}**: p-valor = {anova.pvalue:.4f}")

# Se√ß√£o 3 - Interpreta√ß√£o dos Resultados
st.header("3. Interpreta√ß√£o dos Resultados da ANOVA")
for var in results:
    if results[var] < 0.05:
        st.success(f"H√° diferen√ßa estatisticamente significativa nos pre√ßos m√©dios entre os n√≠veis de {var} (p-valor = {results[var]:.4f})")
    else:
        st.info(f"N√£o h√° evid√™ncia de diferen√ßa significativa entre os n√≠veis de {var} (p-valor = {results[var]:.4f})")

# Se√ß√£o 4 - Valida√ß√£o dos Pressupostos
st.header("4. Valida√ß√£o dos Pressupostos da ANOVA")
for var in [var1, var2, var3]:
    st.subheader(f"Pressupostos para {var}")
    modelo = sm.OLS.from_formula(f'{var_target} ~ C({var})', data=df_clean).fit()
    residuos = modelo.resid

    shapiro = stats.shapiro(residuos)
    bp_test = het_breuschpagan(residuos, modelo.model.exog)

    st.write(f"Shapiro-Wilk (normalidade dos res√≠duos): p-valor = {shapiro.pvalue:.4f}")
    st.write(f"Breusch-Pagan (homocedasticidade): p-valor = {bp_test[1]:.4f}")

# Se√ß√£o 5 - Alternativas se ANOVA tradicional n√£o for adequada
st.header("5. Alternativas √† ANOVA Tradicional")
for var in [var1, var2, var3]:
    modelo = sm.OLS.from_formula(f'{var_target} ~ C({var})', data=df_clean).fit()
    residuos = modelo.resid
    shapiro = stats.shapiro(residuos)
    bp_test = het_breuschpagan(residuos, modelo.model.exog)

    if shapiro.pvalue < 0.05 or bp_test[1] < 0.05:
        grupos = [group[var_target].values for name, group in df_clean.groupby(var)]
        kruskal = stats.kruskal(*grupos)
        st.warning(f"Para {var}, ANOVA tradicional pode n√£o ser adequada. Teste de Kruskal-Wallis: p-valor = {kruskal.pvalue:.4f}")
    else:
        st.success(f"Para {var}, os pressupostos foram atendidos. ANOVA tradicional √© apropriada.")

# Se√ß√£o 6 - Relat√≥rio Final
st.header("6. Relat√≥rio Final")
with st.expander("Clique para visualizar o relat√≥rio consolidado"):
    report = """
## Relat√≥rio Consolidado

### Vari√°veis analisadas:
- Bairro (Neighborhood)
- Tipo de Garagem (GarageType)
- N√∫mero de Lareiras (Fireplaces)

### Resultados da ANOVA:
- Neighborhood: {0:.4f}
- GarageType: {1:.4f}
- Fireplaces: {2:.4f}

### Interpreta√ß√£o:
- A ANOVA revelou diferen√ßas estatisticamente significativas nos pre√ßos m√©dios com base em algumas caracter√≠sticas, conforme os valores de p apresentados.

### Valida√ß√£o dos Pressupostos:
- Verificou-se normalidade e homocedasticidade para cada vari√°vel.
- Quando os pressupostos foram violados, optou-se pelo uso do teste de Kruskal-Wallis.

### Conclus√£o:
- As an√°lises confirmam que certas caracter√≠sticas influenciam significativamente os pre√ßos das casas.
- A ANOVA foi utilizada quando adequada, e testes n√£o-param√©tricos foram aplicados como alternativa.
""".format(results[var1], results[var2], results[var3])
    st.text_area("Relat√≥rio Final", value=report, height=300)

# Se√ß√£o 7 - Bibliografia
st.header("7. Bibliografia")
st.markdown("""
- Ames Housing Dataset: https://www.kaggle.com/datasets/prevek18/ames-housing-dataset  
- Montgomery, D.C. *Design and Analysis of Experiments*. Wiley.  
- Hair, J.F. et al. *Multivariate Data Analysis*. Pearson.  
- Scipy & Statsmodels Documentation
""")



st.warning("Por favor, envie o dataset CSV para come√ßar a an√°lise.")

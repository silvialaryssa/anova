# anovapp.py - Aplicativo modularizado de an√°lise ANOVA

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import altair as alt

# ================================
# CONFIGURA√á√ïES INICIAIS
# ================================
st.set_page_config(page_title="An√°lise ANOVA - Ames Housing", layout="wide")
st.title("An√°lise Estat√≠stica com ANOVA - Ames Housing Dataset")

# ================================
# FUN√á√ïES UTILIT√ÅRIAS
# ================================
uploaded_file = 'AmesHousing.csv'  # Default file for demonstration
@st.cache_data
def carregar_dados(uploaded_file):
 return pd.read_csv(uploaded_file)

def exibir_colunas_descricao(df):
    descricoes = {
    'Order': 'Identificador de ordem no dataset',
    'PID': 'Identificador √∫nico da propriedade',
    'MS SubClass': 'Tipo de constru√ß√£o (c√≥digo)',
    'MS Zoning': 'Classifica√ß√£o de zoneamento da propriedade',
    'Lot Frontage': 'Frente do lote (em p√©s)',
    'Lot Area': '√Årea total do lote (em p√©s quadrados)',
    'Street': 'Tipo de rua de acesso',
    'Alley': 'Tipo de beco de acesso (se houver)',
    'Lot Shape': 'Formato do lote',
    'Land Contour': 'Contorno do terreno',
    'Utilities': 'Servi√ßos p√∫blicos dispon√≠veis',
    'Lot Config': 'Configura√ß√£o do lote',
    'Land Slope': 'Inclina√ß√£o do terreno',
    'Neighborhood': 'Bairro onde a casa est√° localizada',
    'Condition 1': 'Proximidade com vias principais ou outras condi√ß√µes',
    'Condition 2': 'Condi√ß√£o adicional',
    'Bldg Type': 'Tipo de edifica√ß√£o',
    'House Style': 'Estilo da resid√™ncia',
    'Overall Qual': 'Qualidade geral do material e acabamento',
    'Overall Cond': 'Condi√ß√£o geral da casa',
    'Year Built': 'Ano de constru√ß√£o',
    'Year Remod/Add': 'Ano da √∫ltima reforma ou adi√ß√£o',
    'Roof Style': 'Estilo do telhado',
    'Roof Matl': 'Material do telhado',
    'Exterior 1st': 'Acabamento externo prim√°rio',
    'Exterior 2nd': 'Acabamento externo secund√°rio',
    'Mas Vnr Type': 'Tipo de revestimento de alvenaria',
    'Mas Vnr Area': '√Årea de revestimento de alvenaria',
    'Exter Qual': 'Qualidade do acabamento externo',
    'Exter Cond': 'Condi√ß√£o do acabamento externo',
    'Foundation': 'Tipo de funda√ß√£o',
    'Bsmt Qual': 'Qualidade do por√£o',
    'Bsmt Cond': 'Condi√ß√£o do por√£o',
    'Bsmt Exposure': 'Exposi√ß√£o do por√£o √† luz natural',
    'BsmtFin Type 1': 'Tipo de acabamento do por√£o 1',
    'BsmtFin SF 1': '√Årea do por√£o finalizada (tipo 1)',
    'BsmtFin Type 2': 'Tipo de acabamento do por√£o 2',
    'BsmtFin SF 2': '√Årea do por√£o finalizada (tipo 2)',
    'Bsmt Unf SF': '√Årea do por√£o n√£o finalizada',
    'Total Bsmt SF': '√Årea total do por√£o',
    'Heating': 'Tipo de aquecimento',
    'Heating QC': 'Qualidade do sistema de aquecimento',
    'Central Air': 'Possui ar condicionado central',
    'Electrical': 'Sistema el√©trico',
    '1st Flr SF': '√Årea do primeiro andar',
    '2nd Flr SF': '√Årea do segundo andar',
    'Low Qual Fin SF': '√Årea de baixa qualidade finalizada',
    'Gr Liv Area': '√Årea total habit√°vel acima do solo',
    'Bsmt Full Bath': 'Banheiro completo no por√£o',
    'Bsmt Half Bath': 'Meio banheiro no por√£o',
    'Full Bath': 'Banheiros completos acima do solo',
    'Half Bath': 'Meios banheiros acima do solo',
    'Bedroom AbvGr': 'N√∫mero de quartos acima do solo',
    'Kitchen AbvGr': 'N√∫mero de cozinhas acima do solo',
    'Kitchen Qual': 'Qualidade da cozinha',
    'TotRms AbvGrd': 'Total de c√¥modos acima do solo',
    'Functional': 'Funcionalidade da casa',
    'Fireplaces': 'N√∫mero de lareiras',
    'Fireplace Qu': 'Qualidade das lareiras',
    'Garage Type': 'Tipo de garagem',
    'Garage Yr Blt': 'Ano de constru√ß√£o da garagem',
    'Garage Finish': 'Acabamento da garagem',
    'Garage Cars': 'Capacidade de carros na garagem',
    'Garage Area': '√Årea da garagem',
    'Garage Qual': 'Qualidade da garagem',
    'Garage Cond': 'Condi√ß√£o da garagem',
    'Paved Drive': 'Entrada pavimentada',
    'Wood Deck SF': '√Årea do deck de madeira',
    'Open Porch SF': '√Årea da varanda aberta',
    'Enclosed Porch': '√Årea da varanda fechada',
    '3Ssn Porch': '√Årea da varanda de tr√™s esta√ß√µes',
    'Screen Porch': '√Årea da varanda com tela',
    'Pool Area': '√Årea da piscina',
    'Pool QC': 'Qualidade da piscina',
    'Fence': 'Tipo de cerca',
    'Misc Feature': 'Recursos adicionais (elevador, etc.)',
    'Misc Val': 'Valor dos recursos adicionais',
    'Mo Sold': 'M√™s da venda',
    'Yr Sold': 'Ano da venda',
    'Sale Type': 'Tipo de venda',
    'Sale Condition': 'Condi√ß√£o da venda',
    'SalePrice': 'Pre√ßo final de venda da casa'
}


    df.columns = df.columns.str.replace(' ', '_')

    st.subheader("Descri√ß√£o das Colunas")
    colunas_df = pd.DataFrame({
        "Coluna": df.columns,
        "Descri√ß√£o": [descricoes.get(col.replace('_', ' '), descricoes.get(col, "")) for col in df.columns]
    })
    st.dataframe(colunas_df)

def qq_plot_medias(df, var_categ, var_target):
    medias = df.groupby(var_categ)[var_target].mean().dropna()
    fig = plt.figure(figsize=(4, 3))
    stats.probplot(medias, dist="norm", plot=plt)
    plt.title(f"Q-Q Plot das M√©dias de {var_target} por {var_categ}", fontsize=10)
    plt.xlabel("Quantis te√≥ricos", fontsize=8)
    plt.ylabel("Quantis amostrais", fontsize=8)
    plt.xticks(fontsize=7)
    plt.yticks(fontsize=7)
    plt.grid(True)
    plt.tight_layout()
    return fig

def avaliar_variavel(var, df_clean, var_target):
    st.subheader(f"Vari√°vel: {var}")
    grupos = [group[var_target].values for name, group in df_clean.groupby(var)]
    anova = stats.f_oneway(*grupos)
    st.write(f"p-valor da ANOVA: {anova.pvalue:.6f}")

    if anova.pvalue < 0.001:
        st.markdown("üî¨ **Conclus√£o**: Existe uma **diferen√ßa estatisticamente muito significativa** entre as m√©dias dos grupos.")
    elif anova.pvalue < 0.05:
        st.markdown("üî¨ **Conclus√£o**: Existe uma **diferen√ßa estatisticamente significativa** entre as m√©dias dos grupos.")
    else:
        st.markdown("üìä **Conclus√£o**: **N√£o h√° evid√™ncia estat√≠stica suficiente** para afirmar que as m√©dias dos grupos s√£o diferentes.")

    modelo = sm.OLS.from_formula(f'{var_target} ~ C({var})', data=df_clean).fit()
    residuos = modelo.resid
    shapiro = stats.shapiro(residuos)
    bp_test = het_breuschpagan(residuos, modelo.model.exog)

    p_shapiro = shapiro.pvalue
    st.write(f"Shapiro-Wilk (Normalidade dos res√≠duos): {p_shapiro:.4f}")
    if p_shapiro >= 0.05:
        st.success("‚úÖ Os res√≠duos seguem uma distribui√ß√£o normal (p ‚â• 0.05).")
    else:
        st.warning("‚ö†Ô∏è Os res√≠duos **n√£o seguem** uma distribui√ß√£o normal (p < 0.05).")

    p_bp = bp_test[1]
    st.write(f"Breusch-Pagan (Homocedasticidade dos res√≠duos): {p_bp:.4f}")
    if p_bp >= 0.05:
        st.success("‚úÖ Vari√¢ncia constante dos res√≠duos (homocedasticidade verificada).")
    else:
        st.warning("‚ö†Ô∏è Os res√≠duos **n√£o t√™m vari√¢ncia constante** (heterocedasticidade detectada).")

    if shapiro.pvalue < 0.05 or bp_test[1] < 0.05:
        kruskal = stats.kruskal(*grupos)
        st.warning(f"ANOVA n√£o atende pressupostos. Usando Kruskal-Wallis: p = {kruskal.pvalue:.4f}")
    else:
        st.success("Pressupostos atendidos para ANOVA tradicional")

# ================================
# ENTRADA DE DADOS
# ================================
df = carregar_dados(uploaded_file)
df.columns = df.columns.str.replace(' ', '_')
st.success("Arquivo carregado com sucesso!")
exibir_colunas_descricao(df)

# ================================
# DEFINI√á√ÉO DE VARI√ÅVEIS
# ================================
var_target = 'SalePrice'
var1 = 'Neighborhood'
var2 = 'House_Style'
var3 = 'Bsmt_Full_Bath'
df_clean = df[[var_target, var1, var2, var3]].dropna()

# ================================
# Q-Q Plots
# ================================
st.header("Q-Q Plot das M√©dias por Vari√°vel")
col1, col2, col3 = st.columns(3)
with col1:
    st.subheader(var1)
    st.pyplot(qq_plot_medias(df_clean, var1, var_target))
with col2:
    st.subheader(var2)
    st.pyplot(qq_plot_medias(df_clean, var2, var_target))
with col3:
    st.subheader(var3)
    st.pyplot(qq_plot_medias(df_clean, var3, var_target))

# ================================
# Boxplots com Altair
# ================================
st.header("Boxplots para Visualiza√ß√£o das Vari√°veis")
for var in [var1, var2, var3]:
    chart_data = df_clean[[var, var_target]].dropna()
    chart = alt.Chart(chart_data).mark_boxplot(extent='min-max').encode(
        x=alt.X(f'{var}:N', title=var),
        y=alt.Y(f'{var_target}:Q', title='Pre√ßo de Venda'),
        color=alt.Color(f'{var}:N', legend=None)
    ).properties(width=400, height=200)
    st.altair_chart(chart, use_container_width=True)

# ================================
# AVALIA√á√ÉO DAS VARI√ÅVEIS
# ================================
st.header("Avalia√ß√£o Estat√≠stica das Vari√°veis")
for var in [var1, var2, var3]:
    avaliar_variavel(var, df_clean, var_target)

# ================================
# POST-HOC: Teste de Tukey
# ================================
def tukey_posthoc_plot(df, var_cat, var_target):
    st.subheader(f"Teste Post-Hoc: Tukey HSD para {var_cat}")
    st.subheader(f"Tukey HSD: Compara√ß√µes entre categorias de {var_cat}")
    try:
        tukey = pairwise_tukeyhsd(endog=df[var_target], groups=df[var_cat], alpha=0.05)
        tukey_df = pd.DataFrame(tukey.summary().data[1:], columns=tukey.summary().data[0])

        # Convers√£o rigorosa para booleano
        tukey_df['reject'] = tukey_df['reject'].apply(lambda x: str(x).strip().lower() == 'true')
        # DataFrame final completo
        st.write(f"Total de compara√ß√µes: {len(tukey_df)}")
        tukey_df

        tukey_df['meandiff'] = pd.to_numeric(tukey_df['meandiff'], errors='coerce')
        tukey_df['p-adj'] = pd.to_numeric(tukey_df['p-adj'], errors='coerce')

        # Filtrando apenas as compara√ß√µes significativas
  
        st.write(f"Compara√ß√µes significativas (p < 0.05): {tukey_df[tukey_df['reject']].shape[0]}")
        sig_df = tukey_df[tukey_df['reject'] == True].copy()
        
        

        if sig_df.empty:
            st.info("Nenhuma diferen√ßa estat√≠stica significativa encontrada entre os pares de categorias.")
        else:
            sig_df['Comparison'] = sig_df['group1'].astype(str) + ' vs ' + sig_df['group2'].astype(str)
            sig_df['meandiff'] = sig_df['meandiff'].astype(float)

            st.dataframe(sig_df[['Comparison', 'meandiff', 'p-adj', 'reject']])

            chart = alt.Chart(sig_df).mark_bar(color='orange').encode(
                x=alt.X('meandiff:Q', title='Diferen√ßa de m√©dias'),
                y=alt.Y('Comparison:N', sort='-x', title='Compara√ß√£o'),
                tooltip=['Comparison', 'meandiff', 'p-adj']
            ).properties(width=400, height=200)

            st.subheader(f"Gr√°fico de Diferen√ßas de M√©dias - {var_cat}")
            st.altair_chart(chart, use_container_width=True)

            # Interpreta√ß√£o autom√°tica
            n = len(sig_df)
            maiores_diffs = sig_df.loc[sig_df['meandiff'].abs().nlargest(3).index]
            exemplo = maiores_diffs.iloc[0]
            interpretacao = (
                f"üí° Foram encontradas **{n} compara√ß√µes com diferen√ßas significativas** entre as categorias de **{var_cat}**.\n\n"
                f"A maior diferen√ßa foi observada entre **{exemplo['Comparison']}**, com uma m√©dia de diferen√ßa de aproximadamente "
                f"**{exemplo['meandiff']:.2f}** no pre√ßo de venda.\n\n"
                f"Essas diferen√ßas indicam que algumas categorias de **{var_cat}** influenciam significativamente os pre√ßos m√©dios das casas."
            )
            st.markdown(interpretacao)
    except Exception as e:
        st.warning(f"Erro ao executar Tukey para {var_cat}: {e}")

for var in [var1, var2, var3]:
    tukey_posthoc_plot(df_clean, var, var_target)


# ================================
# RELAT√ìRIO FINAL
# ================================
st.header("üìò Relat√≥rio Final - An√°lise de Vari√¢ncia (ANOVA) no Ames Housing Dataset")

st.markdown("""
### üîç 1. An√°lise dos Q-Q Plots
Os Q-Q Plots das m√©dias de pre√ßo por categoria foram utilizados para verificar a normalidade das m√©dias dos grupos para cada vari√°vel categ√≥rica analisada:

**Neighborhood (Bairro):**  
Os pontos se afastam significativamente da linha de refer√™ncia, sugerindo viola√ß√£o da normalidade ‚Äî o que indica que os bairros possuem padr√µes distintos e n√£o seguem uma distribui√ß√£o normal conjunta.

**House_Style (Estilo da Casa):**  
Os pontos est√£o relativamente pr√≥ximos da linha, com leves desvios ‚Äî o que sugere uma distribui√ß√£o aproximadamente normal, embora outros testes sejam necess√°rios para confirmar.

**Bsmt_Full_Bath (Banheiro Completo no Por√£o):**  
Os pontos est√£o muito pr√≥ximos da linha reta, indicando uma forte ader√™ncia √† normalidade das m√©dias entre os grupos.

---

### üì¶ 2. An√°lise dos Boxplots
Os boxplots mostram a distribui√ß√£o do pre√ßo de venda para cada categoria das vari√°veis:

**Neighborhood:**  
Apresenta grande variabilidade nos pre√ßos dentro e entre os bairros, com dispers√µes heterog√™neas e valores discrepantes, refor√ßando a ideia de diferen√ßas significativas entre os grupos.

**House_Style:**  
As distribui√ß√µes s√£o mais homog√™neas, mas ainda h√° diferen√ßas vis√≠veis nas medianas, especialmente entre estilos mais comuns e menos comuns.

**Bsmt_Full_Bath:**  
Os grupos t√™m uma distribui√ß√£o mais clara, com aumento progressivo dos pre√ßos com o n√∫mero de banheiros, sugerindo uma tend√™ncia linear ou ordinal.

---

### üìà 3. Testes Estat√≠sticos (ANOVA e P√≥s-Hoc)

| Vari√°vel          | ANOVA p-valor | Shapiro-Wilk (Normalidade) | Breusch-Pagan (Homoscedasticidade) | ANOVA Tradicional Adequada? |
|-------------------|---------------|-----------------------------|------------------------------------|-----------------------------|
| Neighborhood      | < 0.0001      | ‚ùå N√£o (p < 0.05)           | ‚ùå N√£o (p < 0.05)                   | ‚ùå N√£o                      |
| House_Style       | < 0.0001      | ‚ùå N√£o (p < 0.05)           | ‚ùå N√£o (p < 0.05)                   | ‚ùå N√£o                      |
| Bsmt_Full_Bath    | < 0.0001      | ‚ùå N√£o (p < 0.05)           | ‚ùå N√£o (p < 0.05)                   | ‚ùå N√£o                      |

üìå **Conclus√£o:** Em nenhuma das vari√°veis os pressupostos da ANOVA tradicional foram atendidos. Portanto, testes alternativos n√£o param√©tricos foram utilizados.

---

### üîÅ Kruskal-Wallis
Todas as vari√°veis apresentaram **p-valor < 0.05**, confirmando que h√° **diferen√ßas estat√≠sticas significativas entre os grupos** em cada uma delas.

---

### üî¨ Teste Post Hoc (Tukey HSD)
O teste de Tukey HSD identificou v√°rias diferen√ßas significativas entre pares de categorias para todas as vari√°veis analisadas.  
As compara√ß√µes com maiores diferen√ßas de m√©dias foram evidenciadas nos gr√°ficos e tabelas geradas no app.  
O gr√°fico de barras auxilia na interpreta√ß√£o visual dos pares com diferen√ßas mais relevantes.

---

### üß† Conclus√£o Geral
As vari√°veis categ√≥ricas **Neighborhood**, **House_Style** e **Bsmt_Full_Bath** influenciam significativamente o pre√ßo de venda das casas.  
A ANOVA tradicional n√£o foi adequada, pois os testes de normalidade e homocedasticidade falharam para todas as vari√°veis.  
O uso de testes **n√£o param√©tricos** como o **Kruskal-Wallis** foi essencial e revelou diferen√ßas significativas entre os grupos.  
O teste de **Tukey HSD** complementou a an√°lise, detalhando quais pares de categorias apresentam as maiores diferen√ßas de pre√ßo.


### üß† Conclus√£o Geral
**PPCA**: Programa de Computa√ß√£o Aplicada - UNB  
**AEDI**: An√°lise Estat√≠stica de Dados e Informa√ß√µes  
**Prof.** Jo√£o Gabriel de Moraes Souza
**Aluna:** Silva Laryssa Branco da Silva
**Data:** 2024-01-15

---


### Autores e Refer√™ncias
- **PPCA**: Programa de Computa√ß√£o Aplicada - UNB  
- **AEDI**: An√°lise Estat√≠stica de Dados e Informa√ß√µes  
- **Prof.** Jo√£o Gabriel de Moraes Souza  
- **Aluna**: Silva Laryssa Branco da Silva  
- **Data**: 2024-01-15


### üîó Links

- üìä Projeto no Community Cloud: [https://aedianova.streamlit.app/](https://aedianova.streamlit.app/)  
- üíª C√≥digo fonte GitHub: [https://github.com/silvialaryssa/anova](https://github.com/silvialaryssa/anova)


""")



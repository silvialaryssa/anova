# anovapp.py - Aplicativo modularizado de an√°lise ANOVA

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import altair as alt

# ================================
# CONFIGURA√á√ïES INICIAIS
# ================================
st.set_page_config(page_title="An√°lise ANOVA - Ames Housing", layout="wide")
st.title("An√°lise Estat√≠stica com ANOVA - Ames Housing Dataset")

# ================================
# FUN√á√ïES UTILIT√ÅRIAS
# ================================
uploaded_file = 'AmesHousing.csv'  # Default file for demonstration
@st.cache_data
def carregar_dados(uploaded_file):
 return pd.read_csv(uploaded_file)

def exibir_colunas_descricao(df):
    descricoes = {        
        'Order': 'Identificador de ordem no dataset',
        'PID': 'Identificador √∫nico da propriedade',
        'MS_SubClass': 'Tipo de constru√ß√£o (c√≥digo)',
        'Neighborhood': 'Bairro onde a casa est√° localizada',
        'House_Style': 'Estilo da resid√™ncia',
        'Bsmt_Full_Bath': 'Banheiro completo no por√£o',
        'SalePrice': 'Pre√ßo final de venda da casa'
    }

    df.columns = df.columns.str.replace(' ', '_')

    st.subheader("Descri√ß√£o das Colunas")
    colunas_df = pd.DataFrame({
        "Coluna": df.columns,
        "Descri√ß√£o": [descricoes.get(col, "") for col in df.columns]
    })
    st.dataframe(colunas_df)

def qq_plot_medias(df, var_categ, var_target):
    medias = df.groupby(var_categ)[var_target].mean().dropna()
    fig = plt.figure(figsize=(4, 3))
    stats.probplot(medias, dist="norm", plot=plt)
    plt.title(f"Q-Q Plot das M√©dias de {var_target} por {var_categ}", fontsize=10)
    plt.xlabel("Quantis te√≥ricos", fontsize=8)
    plt.ylabel("Quantis amostrais", fontsize=8)
    plt.xticks(fontsize=7)
    plt.yticks(fontsize=7)
    plt.grid(True)
    plt.tight_layout()
    return fig

def avaliar_variavel(var, df_clean, var_target):
    st.subheader(f"Vari√°vel: {var}")
    grupos = [group[var_target].values for name, group in df_clean.groupby(var)]
    anova = stats.f_oneway(*grupos)
    st.write(f"p-valor da ANOVA: {anova.pvalue:.6f}")

    if anova.pvalue < 0.001:
        st.markdown("üî¨ **Conclus√£o**: Existe uma **diferen√ßa estatisticamente muito significativa** entre as m√©dias dos grupos.")
    elif anova.pvalue < 0.05:
        st.markdown("üî¨ **Conclus√£o**: Existe uma **diferen√ßa estatisticamente significativa** entre as m√©dias dos grupos.")
    else:
        st.markdown("üìä **Conclus√£o**: **N√£o h√° evid√™ncia estat√≠stica suficiente** para afirmar que as m√©dias dos grupos s√£o diferentes.")

    modelo = sm.OLS.from_formula(f'{var_target} ~ C({var})', data=df_clean).fit()
    residuos = modelo.resid
    shapiro = stats.shapiro(residuos)
    bp_test = het_breuschpagan(residuos, modelo.model.exog)

    p_shapiro = shapiro.pvalue
    st.write(f"Shapiro-Wilk (Normalidade dos res√≠duos): {p_shapiro:.4f}")
    if p_shapiro >= 0.05:
        st.success("‚úÖ Os res√≠duos seguem uma distribui√ß√£o normal (p ‚â• 0.05).")
    else:
        st.warning("‚ö†Ô∏è Os res√≠duos **n√£o seguem** uma distribui√ß√£o normal (p < 0.05).")

    p_bp = bp_test[1]
    st.write(f"Breusch-Pagan (Homocedasticidade dos res√≠duos): {p_bp:.4f}")
    if p_bp >= 0.05:
        st.success("‚úÖ Vari√¢ncia constante dos res√≠duos (homocedasticidade verificada).")
    else:
        st.warning("‚ö†Ô∏è Os res√≠duos **n√£o t√™m vari√¢ncia constante** (heterocedasticidade detectada).")

    if shapiro.pvalue < 0.05 or bp_test[1] < 0.05:
        kruskal = stats.kruskal(*grupos)
        st.warning(f"ANOVA n√£o atende pressupostos. Usando Kruskal-Wallis: p = {kruskal.pvalue:.4f}")
    else:
        st.success("Pressupostos atendidos para ANOVA tradicional")

# ================================
# ENTRADA DE DADOS
# ================================
df = carregar_dados(uploaded_file)
df.columns = df.columns.str.replace(' ', '_')
st.success("Arquivo carregado com sucesso!")
exibir_colunas_descricao(df)

# ================================
# DEFINI√á√ÉO DE VARI√ÅVEIS
# ================================
var_target = 'SalePrice'
var1 = 'Neighborhood'
var2 = 'House_Style'
var3 = 'Bsmt_Full_Bath'
df_clean = df[[var_target, var1, var2, var3]].dropna()

# ================================
# Q-Q Plots
# ================================
st.header("Q-Q Plot das M√©dias por Vari√°vel")
col1, col2, col3 = st.columns(3)
with col1:
    st.subheader(var1)
    st.pyplot(qq_plot_medias(df_clean, var1, var_target))
with col2:
    st.subheader(var2)
    st.pyplot(qq_plot_medias(df_clean, var2, var_target))
with col3:
    st.subheader(var3)
    st.pyplot(qq_plot_medias(df_clean, var3, var_target))

# ================================
# Boxplots com Altair
# ================================
st.header("Boxplots para Visualiza√ß√£o das Vari√°veis")
for var in [var1, var2, var3]:
    chart_data = df_clean[[var, var_target]].dropna()
    chart = alt.Chart(chart_data).mark_boxplot(extent='min-max').encode(
        x=alt.X(f'{var}:N', title=var),
        y=alt.Y(f'{var_target}:Q', title='Pre√ßo de Venda'),
        color=alt.Color(f'{var}:N', legend=None)
    ).properties(width=400, height=200)
    st.altair_chart(chart, use_container_width=True)

# ================================
# AVALIA√á√ÉO DAS VARI√ÅVEIS
# ================================
st.header("Avalia√ß√£o Estat√≠stica das Vari√°veis")
for var in [var1, var2, var3]:
    avaliar_variavel(var, df_clean, var_target)

# ================================
# POST-HOC: Teste de Tukey
# ================================
def tukey_posthoc_plot(df, var_cat, var_target):
    st.subheader(f"Tukey HSD: Compara√ß√µes entre categorias de {var_cat}")
    try:
        tukey = pairwise_tukeyhsd(endog=df[var_target], groups=df[var_cat], alpha=0.05)
        tukey_df = pd.DataFrame(tukey.summary().data[1:], columns=tukey.summary().data[0])

        # Convers√£o rigorosa para booleano
        tukey_df['reject'] = tukey_df['reject'].apply(lambda x: str(x).strip().lower() == 'true')
        # DataFrame final completo
        st.write(f"Total de compara√ß√µes: {len(tukey_df)}")
        tukey_df

        tukey_df['meandiff'] = pd.to_numeric(tukey_df['meandiff'], errors='coerce')
        tukey_df['p-adj'] = pd.to_numeric(tukey_df['p-adj'], errors='coerce')

        # Filtrando apenas as compara√ß√µes significativas
  
        st.write(f"Compara√ß√µes significativas (p < 0.05): {tukey_df[tukey_df['reject']].shape[0]}")
        sig_df = tukey_df[tukey_df['reject'] == True].copy()
        
        

        if sig_df.empty:
            st.info("Nenhuma diferen√ßa estat√≠stica significativa encontrada entre os pares de categorias.")
        else:
            sig_df['Comparison'] = sig_df['group1'].astype(str) + ' vs ' + sig_df['group2'].astype(str)
            sig_df['meandiff'] = sig_df['meandiff'].astype(float)

            st.dataframe(sig_df[['Comparison', 'meandiff', 'p-adj', 'reject']])

            chart = alt.Chart(sig_df).mark_bar(color='orange').encode(
                x=alt.X('meandiff:Q', title='Diferen√ßa de m√©dias'),
                y=alt.Y('Comparison:N', sort='-x', title='Compara√ß√£o'),
                tooltip=['Comparison', 'meandiff', 'p-adj']
            ).properties(width=400, height=200)

            st.altair_chart(chart, use_container_width=True)

            # Interpreta√ß√£o autom√°tica
            n = len(sig_df)
            maiores_diffs = sig_df.loc[sig_df['meandiff'].abs().nlargest(3).index]
            exemplo = maiores_diffs.iloc[0]
            interpretacao = (
                f"üí° Foram encontradas **{n} compara√ß√µes com diferen√ßas significativas** entre as categorias de **{var_cat}**.\n\n"
                f"A maior diferen√ßa foi observada entre **{exemplo['Comparison']}**, com uma m√©dia de diferen√ßa de aproximadamente "
                f"**{exemplo['meandiff']:.2f}** no pre√ßo de venda.\n\n"
                f"Essas diferen√ßas indicam que algumas categorias de **{var_cat}** influenciam significativamente os pre√ßos m√©dios das casas."
            )
            st.markdown(interpretacao)
    except Exception as e:
        st.warning(f"Erro ao executar Tukey para {var_cat}: {e}")

for var in [var1, var2, var3]:
    tukey_posthoc_plot(df_clean, var, var_target)


# ================================
# RELAT√ìRIO FINAL
# ================================
st.header("üìÑ Relat√≥rio Final da An√°lise")
st.markdown("""
### An√°lise dos Q-Q Plots
- **Neighborhood**: desvio da normalidade ‚Üí efeitos distintos no pre√ßo.
- **House_Style**: aproxima√ß√£o razo√°vel √† normalidade.
- **Bsmt_Full_Bath**: boa ader√™ncia √† normalidade.

### An√°lise dos Boxplots
- **Neighborhood**: varia√ß√µes amplas e heterog√™neas.
- **House_Style**: diferen√ßas vis√≠veis nas medianas.
- **Bsmt_Full_Bath**: tend√™ncia clara de aumento de pre√ßo com n√∫mero de banheiros.

### Conclus√µes dos Testes Estat√≠sticos
- **Todos os p-valores da ANOVA** foram menores que 0.001.
- **Todos os testes de Shapiro-Wilk e Breusch-Pagan** indicaram viola√ß√£o dos pressupostos.
- Utilizado **teste de Kruskal-Wallis** como alternativa.

### Testes Post Hoc (Tukey HSD)
- Diferencia√ß√£o estat√≠stica significativa entre diversas categorias.
- Evid√™ncias claras de influ√™ncia dessas vari√°veis no **pre√ßo de venda**.

### Conclus√£o Geral
A ANOVA tradicional n√£o foi adequada devido √† viola√ß√£o dos pressupostos de normalidade e homocedasticidade. O uso do teste **Kruskal-Wallis** foi necess√°rio e apropriado. Com base nas an√°lises, conclui-se que as vari√°veis **Neighborhood**, **House_Style** e **Bsmt_Full_Bath** t√™m **influ√™ncia estatisticamente significativa sobre os pre√ßos das casas** no dataset Ames Housing.
""")
